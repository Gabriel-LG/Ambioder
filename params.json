{"name":"Ambioder","tagline":"Alternative firmware for Ikea's Dioder, providing Ambient Lighting","body":"[![Ambioder demonstration video](https://raw.github.com/wiki/gabriel-lg/Ambioder/images/video.png)](http://youtu.be/GyrZ5HvOXz0)  \r\nAll you need is a very small hardware modification (5 wires), a 5V RS232 port and (access to) a PIC programmer.  \r\n_**WARNING:**_ after reprogramming your Dioder, its original functionality will be lost.  \r\nDownload the .hex file for the PIC programmer [here](https://raw.github.com/wiki/gabriel-lg/Ambioder/binaries/Ambioder_v1.0.hex).\r\n\r\n## Intro\r\nSometime ago I purchased a Dioder LED light from Ikea, with the intention to create an Ambient Lighting device for my mediacentre. I saw that there were numerous Dioder hacks around, including an Ambient Lighting hack. However most hacks require an extra MCU, or perform a complete brain transplant. I figured that Dioder's brains are powerful enough for some Ambient Lighting.  \r\nI found three projects that were really helpful; first of all [Christian Amsüss' Dioder++ project](http://christian.amsuess.com/tutorials/threebutton_dioder/) that actually provided the hardware modifications I used for my hack. Also [the Boblight project by Bob Loosen](http://code.google.com/p/boblight/), that supplied me with ready-made Ambient Lighting software for my mediacentre.   \r\nAlso I would like to mention  [the OSAA Skilt 2.0 project by Vagrearg](http://www.vagrearg.org/content/skilt20), this project provided me with the schematics of the Dioder's internal hardware and a benchmark ;-)  \r\nI decided to name my project “Ambioder”, as a combination of Ambient lighting and Dioder.\r\n\r\n## About the Dioder\r\nThe Dioder (3-button version) consists of a power supply, 4 led bars each containing 9 pretty bright RGB LEDs, some fixtures and a control unit. The interesting part is the control unit, which is build around a Microchip PIC16F684 microcontroller. The PIC generates 3 PWM signals (Red, Green and Blue) which are amplified by 3 FETs, to power the RGB LEDs. A potmeter is connected to an AD convertor attached to a colorwheel. There are also 3 buttons attached to GPIO lines.  \r\nSo I hooked up my old oscilloscope to the Dioder to see what Ikea's software was capable of. It turns out that rotating the color wheel, only fades one channel at a time (the other two are kept either on or off). The PWM period is exactly 1kHz and is divided in 20 steps (providing 21 intensities, including black/off). \r\n\r\n## My goals\r\nWhat I wanted to achieve, was a simple and cheap solution, providing ambient lighting for your mediacenter. I also wanted to keep the hardware modifications to a minimum, in order to keep this solution accessible to (almost) everyone.  \r\nThe quality of the lighting has to be good in terms of number of colors and frequency. Also the interface to the mediacenter has to be very responsive and reliable.\r\n\r\n## The hardware\r\nTo turn your Dioder into an Ambioder, all you need to do is [solder the ICSP port (5 wires) onto the Dioder PCB](http://christian.amsuess.com/tutorials/threebutton_dioder/) and reprogram it. The hex file for reprogramming can be downloaded [here](https://raw.github.com/wiki/gabriel-lg/Ambioder/binaries/Ambioder_TTL_v1.0.hex).  \r\nTo communicate with your Ambioder, you will need a USB TTL-RS232 adapter ([like this one](http://dx.com/p/pl2303-mini-usb-to-ttl-uart-communication-module-board-blue-161543)).  \r\n\r\n_Alternatively, you can use a **CHEAP** USB serial port, like I did; The reason it has to be cheap, is because the higher quality ones contain an RS-232 level-shifter. The -5 to -15V signal generated by the level-shifter could damage the microcontroller! You will need [this version](https://raw.github.com/wiki/gabriel-lg/Ambioder/binaries/Ambioder_v1.0.hex) of the Ambioder firmware for use with a USB serial port._ \r\n  \r\nConnect the USB-RS232 controller to the ICSP port you previously soldered to the Dioder PCB. Pin 5 of the serial port (gnd) goes to pin 3 (Vss) of the ICSP port. Pin 3 of the serial port (tx) goes to pin 1 (Vpp) of the ICSP.  \r\n![ICSP](https://raw.github.com/wiki/gabriel-lg/Ambioder/images/ICSP.png)  \r\n_**WARNING:**_ Do not use the serial port on your motherboard, it most certainly contains a level-shifter!  \r\nI used [this USB-RS232 adapter from Dealextreme](http://dx.com/p/usb-to-rs232-adapter-with-usb-extension-cable-41cm-length-24799); this adapter has no level shifter. If you are using another RS232 adapter, verify that it does not contain a level-shifter.  \r\n![hardware](https://raw.github.com/wiki/gabriel-lg/Ambioder/images/Ambioder_hw.jpg)\r\n_**NOTE:**_ TTL RS232 adapters are currently not supported, because they generate an inverted TX signal, compared to a 0-5V RS232 adapter. I am planning to create a custom hex file for those.  \r\n\r\n## The PIC software\r\nThe PIC software was a lot more difficult; the PIC16F684 does not contain a UART controller, it also does not contain a PWM controller. Since I want the UART to be 100% reliable and the PWM to be 100% stable, the absence of these components provided a challenge.  \r\nLuckily the PIC16F684 does come with an interrupt controller and a timer/comparator interrupt source, I use this to poll the serial port and step the PWM at a regular interval.  \r\nAmbioder uses the PIC16F684 internal oscillator at 8Mhz, resulting in 2 million instructions per second. This might sound like a lot, but is actually pretty tight...\r\n\r\n### Design\r\nI designed the PIC software to run as two concurrent loops.  \r\nThe IO-loop is executed with every timer interrupt. It starts by latching the I/O pins (to ensure constant timing), it then steps the PWM generator and samples the UART RX-line.    \r\nThe main-loop gathers the received bytes from the UART. After a complete sequence is received, it will pass the received PWM period and R/G/B dutycycles PWM generator.  \r\nThese two loops interface with each-other using a few shared variables.\r\n![design](https://raw.github.com/wiki/gabriel-lg/Ambioder/images/Ambioder_design.png)\r\n\r\n### Serial protocol\r\nThe main-loop will look for a sequence of the following bytes (hex):  \r\n`[0x0X 0x1X] 0x2X 0x3X 0x4X 0x5X 0x6X 0x7X`  \r\nThe most significant nibble contains the address, the least significant nibble contains the data\r\n* address 0: pwm period, most significant nibble\r\n* address 1: pwm period, least significant nibble\r\n* address 2: pwm red, most significant nibble\r\n* address 3: pwm red, least significant nibble\r\n* address 4: pwm green, most significant nibble\r\n* address 5: pwm green, least significant nibble\r\n* address 6: pwm blue, most significant nibble\r\n* address 7: pwm blue, least significant nibble\r\n\r\nThe PWM period is optional and will remain unchanged if it was not received. \r\nAfter receiving the entire sequence, the PWM period and Red/Green/Blue values are passed to the PWM generator and the main-loop restarts.\r\nEvery UART error or unexpected RX byte, will result in the main-loop restarting.\r\n\r\n### Implementation\r\nMy implementation provides a UART receiver, an RGB PWM generator and a main-loop implementing my protocol.    \r\nThe UART receiver functions at 19200/8N1, with a 1-byte buffer.\r\nThe RGB PWM generator can generate anything from 16 Million colors at 224Hz, to 4096 colors at 3.8kHz. The PWM generator is also buffered, so it will never flicker when changing colors.    \r\n\r\n## The boblight implementation\r\nTo control the Ambioder device, [I extended the Boblight project with Ambioder support.](https://github.com/Gabriel-LG/boblight-ambioder)  \r\n\r\n#The result\r\nI have installed the Ambioder on my mediacentre and tested it for a few days now. I am very pleased with the results. It works reliable, the PWM frequency is good and it produces very nice colors.\r\n\r\nExcited about Ambioder? [Buy me a beer!](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=4S8Y7WJ2YKSYW&lc=GB&item_name=Ambioder&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted)","google":"UA-39418318-1","note":"Don't delete this file! It's used internally to help with page regeneration."}