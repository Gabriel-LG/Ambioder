{"tagline":"Reprogram Ikea's Dioder, for Ambient Lighting","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"All you need is a very small hardware modification, a 5V RS232 port and access to a PIC programmer.  \r\n_**WARNING:**_ after reprogramming your Dioder, its original functionality will be lost.\r\n\r\n## Intro\r\nSometime ago I purchased a Dioder LED light from Ikea, with the intention to create an Ambient Lighting device for my mediacentre. I saw that there were numerous Dioder hacks around, including an Ambient Lighting hack. However most hacks require an extra MCU, or perform a complete brain transplant. I figured that Dioder's brains are powerful enough for some Ambient Lighting.  \r\nI found three projects that were really helpful; first of all [Christian Amuess' Dioder++ project](http://christian.amsuess.com/tutorials/threebutton_dioder/) that actually provided the hardware modifications I used for my hack. Also [the Boblight project by Bob Loosen](http://code.google.com/p/boblight/), that supplied me with ready-made Ambient Lighting software for my mediacentre.   \r\nAlso I would like to mention  [the OSAA Skilt 2.0 project by Vagrearg](http://www.vagrearg.org/content/skilt20), this project provided me with the schematics of the Dioder's internal hardware and a benchmark of what I was up against ;-)  \r\nI decided to name my project “Ambioder”, as a combination of Ambient lighting and Dioder.\r\n\r\n## About the Dioder\r\nThe Dioder (3-button version) consists of a power supply, 4 led bars each containing 9 pretty bright RGB LEDs, some fixtures and a control unit. The interesting part is the control unit, which is build around a Microchip PIC16F684 microcontroller. The PIC generates 3 PWM signals (Red, Green and Blue) which are amplified by 3 FETs, to power the RGB LEDs. A potmeter is connected to an AD convertor attached to a colorwheel. There are also 3 buttons attached to GPIO lines.  \r\nSo I hooked up my old oscilloscope to the Dioder to see what Ikea's software was capable of. It turns out that rotating the color wheel, only fades one channel at a time (the other two are kept either on or off). The PWM period is exactly 1kHz and is divided in 20 steps (providing 21 intensities, including black/off). \r\n\r\n## My goals\r\nWhat I wanted to achieve, was a simple hack, that provides a reliable and fast way for my mediacentre (with Boblight) to control the color of the LED bars. Also the PWM frequency and resolution need to be sufficient and constant, to ensure an enjoyable multimedia experience.\r\n\r\n## The hardware\r\nTo turn your Dioder into an Ambioder, all you need to do is [solder the ICSP port (5 wires) onto the Dioder PCB and reprogram it](http://christian.amsuess.com/tutorials/threebutton_dioder/). Then connect a 5V RS232 convertor to the ICSP port (GND to GND and TX to Vpp).  \r\nI used [this USB-RS232 adapter from Dealextreme](http://dx.com/p/usb-to-rs232-adapter-with-usb-extension-cable-41cm-length-24799); this adapter is so cheap, that it does not even come with an RS232 level shifter, so I could interface it directly with the Ambioder.\r\n![hardware](http://gabriel-lg.github.com/Ambioder/images/Ambioder_hw.jpg)\r\n\r\n## The PIC software\r\nThe PIC software was a whole other matter, the PIC16F684 does not contain a UART controller, it also does not contain a PWM controller. And since I want the UART to be 100% reliable and the PWM to be 100% stable, the absence of these components provided a challenge.  \r\nLuckily the PIC16F684 does come with an interrupt controller and a timer/comparator interrupt source, that I use to poll the serial port and step the PWM at a regular interval .  \r\nThe Ambioder uses the PIC16F684  internal oscillator at 8Mhz, resulting in 2 million instructions per second. This might sound like a lot, but is actually pretty tight...\r\n\r\n### Design\r\nI designed the PIC software to run as two concurrent loops.  \r\nThe main-loop gathers the received bytes from the UART. After a complete sequence is received, it will pass the received PWM period and R/G/B dutycycles PWM generator.  \r\nThe IO-loop is executed with every tick of the timer. It starts by latching the I/O pins (to ensure constant timing), it then steps the PWM generator and performs the UART RX-line sampling.    \r\nThese two loops interface with each-other using a few shared variables.\r\n![hardware](http://gabriel-lg.github.com/Ambioder/images/Ambioder_design.svg)\r\n\r\n### Serial protocol\r\nThe main-loop will look for a sequence of the following bytes:  \r\n`binary: (00xxxxxx) 01xxxxxx 10xxxxxx 11xxxxxx`  \r\nThe first byte (optional) configures the PWM period in number of timer ticks. The following 3 bytes (obligatory)  set the red,green and blue dutycycles respectively. The dutycycle is also expressed in number of ticks.  \r\nAfter receiving the entire sequence, the PWM period and red/green/blue dutycycles are passed to the PWM generator and the main-loop restarts.\r\nEvery UART error or unexpected RX byte, will result in the main-loop restarting.\r\n\r\n### Implementation\r\nMy implementation provides a UART receiver, an RGB PWM generator and a main-loop implementing my protocol. I also implemented a UART transmitter, that can be activated to use any PORTA output (this transmitter is not used right now).   \r\nThe UART receiver functions at 9600/8N1, with a 1-byte buffer, the baud-rate is configurable by changing the timer settings.  \r\nThe RGB PWM generator can generate from 16 Million colors at 113Hz, to 8 colors at 29kHz. The PWM generator is also buffered, so it will never flicker when changing colors. The PWM generator is limited to 262.144 colors by the serial protocol I am using right now.  \r\nI profiled the execution paths for the IO-loop, and came to a worst-case scenario where 60 instructions are consumed per tick (including interrupt entry and return) and 44 in a typical scenario. This leaves more than enough CPU cycles to execute the main-loop concurrently. So I can state that Ambioder is a hard-real-time system.\r\n\r\n## The boblight implementation\r\nTo control the Ambioder device, I extended the Boblight project to add the Ambioder protocol. It sets the Ambioder to 18-bit colors@453Hz.  \r\n\r\n#The result\r\nFor my test setup, I configured a sampling rate of 50Hz for boblightd and boblight-X11. The effect is pretty cool if I may say so myself. Although I thought that 18-bit (262.144) colors would be more than enough, I do notice the transitions between the darkest shades. Furthermore I was worried that the limited 453Hz PWM frequency would produce a flickering effect. But I can only notice some flickering when looking directly into the LEDs, and not at all when the light is diffused on the wall.\r\n\r\n## The future\r\nAlthough I am very pleased with the result, I am determined to get the darkest shades to transition seamlessly as well. So I plan to revisit the  serial protocol to allow for 8-bit dutycycles. Also I am still worried about the  PWM frequency dropping too low when using 21-bit/24-bit colors at 226Hz/113Hz. Therefore I will attempt to double the the tick frequency by optimizing the IO-loop. If that fails, then I will increase the tick frequency to 4x or 5x the UART baud-rate.","google":"","name":"Ambioder"}